Aim:- Simulate multiprogramming with fixed tasks
Description:-
 One of the simplest method for allocating memory is to divide memory 
into several fixed-sized partitions. Each partition may contain exactly one process. 
Thus the degree of multiprogramming is bounded by the number of partitions. 
Depending on the size of partitions, multiprogramming with fixed tasks is of two 
types; equal size partitions and unequal size partitions. In equal size partitions, any 
process whose size is less than or equal to the partition size can be loaded into an 
available partition. The OS can swap a process our of a partition. But the processes 
having more than partition size cannot be accommodated & for those processes 
having only small size, a lot of memory in a partition is wasted (internal 
fragmentation).
 Thus in unequal size partitions, partitions are of different sizes. Smaller 
process can now be placed in smaller partitions reducing internal fragmentation.
In unequal partitioning, we need to know where a process must be placed since all 
the partitions are of different sizes. This procedure is a particular instance of the 
general dynamic storage allocation problem, which concerns how to satisfy a 
request of size n from list of free partitions. These are many solutions to this 
problem.
*First-fit: Allocate the first partition that is big enough for the process. Searching 
starts at beginning of the set of partitions. We can stop searching as soon as we 
find a free partition that is large enough.
*next-fit: Next to the first fit, searching of partition starts from location where the 
previous first-fit search ended.
*best-fit: Allocate the smallest partition so that it produces minimum 
fragmentation among available free partitions.
*worst-fit: Allocate the largest partition among the available free partitions.33
#include<stdio.h>
#include<stdlib.h>
struct process
{
char name[10];
int size,f,pn,ps;
}p[20];
int tf,n,m,o,es,t,finish[20],s[20];
void mft_equal();
void mft_unequal();
void first_fit();
void next_fit();
void best_fit();
void worst_fit();
int main()
{
int i,c,h;
printf(“enter the size of main memory:”);
scanf(“%d”,&m);
printf(“enter the size of operating system:”);
scanf(“%d”&o);
printf(“enter the number of processes:”);
scanf(“%d”,%n);34
for(i=0;i<n;i++)
{
printf(“process name:”);
scanf(“%s”,p[i].name);
scanf(“%d”,&p[i].size);
finish[i]=0;
}
printf(“enter the number of partitions:”);
scanf(“%d”,&t);
printf(“enter your choice \n 1.equal partitions \n 2.unequal partitions \n”);
scanf(“%d”,&ch);
switch(ch)
{
case1:
mft_equal();
break;
case2:
mft_equal();
break();
}
printf(“\n processes that are not allocated memory are:”);
for(i=0;i<n;i++)
if(finish[i]==0)35
printf(“%s” \t”,p[i].name);
printf(‘\n \n total fragmentation:%d \n”,tf);
return 0;
}
void mft-equal()
{
int i,count=0;
es=(m-o)/t;
for(i=0;i<n;i++)
{
if(p[i].size<=es)
{
p[i].f=es-p[i].size;
finish[i]=1;
tf+=p[i].size;
count++;
}
if(count==t) break;
}
tf=(m-o)-tf;
printf(“\n processes that are allocated memory are :\n”);
for(i=0;i<n;i++)
if(finish[i]==1)36
printf(“%s \t %d \t %d \n”,p[i].name,p[i].size,p[i].f);
return;
}
void mft_unequal()
{
int i,choice,sum=0;
do
{
For(i=0;i<t;i++)
{
If(i==t-1)
{
 S[i]=m-0-sum;
 Break;
}
Printf(“enter the size of partition %d:”i+1);
Scanf(“%d”,&s[i]);
Sum+=s[i];
If((sum>=(m-0))
{
 Printf(“re-enter the size of partitions, since it exceeds memory space\”);
 Sum=0;
 Break;37
}
}
If(i!=t-1) continue;
}while(i!=(t-1));
Printf(“enter your choice of dynamic storage allocation algorithem\n1.first 
fit\n 2.next fit\n 3.best fit\n 4.worst fit\n”);
Scanf(“%d”,&choice);
Switch(choice)
{
 Case 1:
 First-fit();
 Break;
 case 2:
 next-fit();
 break;
 case 3:
 best-fit();
 break;
 case 4;
 worst-fit();
 break;
}
tf=(m-0)-tf;38
printf(“\n processes that are allocated memory are:\n”);
printf(“\n process\t size\t partition no\t partition size\t internal fragmentation 
\n”;
for(i=0;i<n;i++)
 if(finish[i]==1)
 
printf(“%s\t%d\t%d\t%d\t\t%d\n”,p[i].name,p[i].size,p[i].pn,p[i].ps,p[i].f);
return;
}
Void first-fit()
{
 int i,j;
 for(i=0;<i<n;i++)
 for(j=0;j<t;j++)
if(p[i].size<=s[j])
{
 Finish[i]=1;
 P[i].pn=j;
 P[i].ps=s[j];
 P[i].f=s[j]-p[i].size;
 S[j]=0;
 tf+=p[i].size;
break;39
}
}
Void next-fit()
{
int i,j,a=0;
for(i=0;i<n;i++)
 for(j=a;j<t;j++)
 if(p[i].size<=s[j])
 {
 Finish[i]=1;
 P[i].pn=j;
 P[i].ps=s[j];
 P[i].f=s[j]-p[i].size;
 S[j]=0;
 tf+=p[i].size;
 a=j;
 break;
}
}
Void best-fit()
{
int i,j,min,minpos;
for(i=0;i<n;i++)40
{
 Min=9999,minpos=30;
 for(j=0;j<t;j++)
 if(p[i].size<=s[j])
{
 P[i].f=s[j]-p[i].size
 If(p[i].f<min)
{
 Min=p[i].f;
 Minpos=j;
}
}
If(minpos!=30)
{
 Finish[i]=1;
 P[i].f=min;
 P[i].pn=minpos;
P[i].ps=s[minpos];
S[minpos]=0;
Tf+=p[i].size;
}
}
Void worst-fit()41
{
 Int i,j,minpos,max;
For(i=0;i<n;i++)
{
Maxpos=-1;
Max=1;
For(j=0;j<t;j++)
 If(p[i].size<=s[j]
{
 P[i].f=s[j]-p[i].size;
 If(p[i].f>max)
{
 Max=p[i].f;
 Maxpos=j;
}
}
If(maxpos!=-1)
{
 Finish[i]=1;
 P[i].f=max;
 P[i].pn=maxpos;
P[i].ps=s[maxpos];
S[maxpos]=0;42
tf+=p[i].size;
}
}
}
Output1:
Enter the size of main memory:500
Enter the size of operating system:100
Enter the number of processes:5
Process name:p1
Process size:60
Process name:p2
Process size:70
Process name:p3
Process size:100
Process name:p4
Process size:90
Process name:p5
Process size:60
Enter the number of partitions:4
Enter your choice
1.equal partitions
2.unequal partitions43
1
Processes that are allocated memory are:
Process size internal fragmentation
P1 60 40
P2 70 30
P3 100 0
P4 90 10
Processes that are not allocated memory are:
P5
Total fragmentation:80
Output2:
Enter the size of main memory:500
EnOutpter the size of operating system:100
Enter the number of processes:6
Process name:p1
Process size:50
Process name:p2
Process size:40
Process name:p3
Process size:10044
Process name:p4
Process size:90
Process name:p5
Process size:120
Process name:p6
Process size:70
Enter the number of partitions:5
Enter your choice
1.equal partitions
2.unequal partitions
2
 Enter the size of partition1:100
 Enter the size of partition2:200
 Enter the size of partition3:150
 Re-enter the size of partitions, since it exceeds memory space
 Enter the size of partition1:50
 Enter the size of partition2:80
 Enter the size of partition3:100
 Enter the size of partition4:150
 Enter your choice of dynamic storage allocation
 1.first fit
 2.next fit 
 3.best fit45
 4.worst fit
 3
 Processes that are allocated memory are:
Process size partition no partition size internal fragmentation
P1 50 0 50 0
P2 40 1 80 40 
P3 100 2 100 0
P4 90 3 150 60
Processes that are not allocated memory are:
p5 p6
Total fragmentation:120
 
 46
Aim: 
simulate multiprogramming
