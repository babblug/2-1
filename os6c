Aim:
simulate the page replacement algorithm optimal algorithm
Description-:
One resultof the discovery of beladys anamolywas the search for an optimal page 
replacement algorithm,which has the lowest page fault rate of all algorithms and 
will never buffer from beladys anamoly.Such an algorithmdoes exists and has been 
called OPT or MIN.It is simply:Replace the page that will not be used for the 
longest period of time.Use of this page replacement algorithm guarantees the 
lowest possible page fault for a fixed number of frames.
 Infact, no replacement algorithm can process a given reference string 
with fewer page faults than optimal algorithm.Unfortunately, the optimal page 
replacement algorithm is difficult to implement ,because it requires future 
knowledge of the reference string. As a result, the optimal algorithmis used mainly 
for comparison studies.
ALGORITHM:
1.Start
2.read the number of frames,length of reference string and the reference string.
3.for i from0 to n do
4.for j from 0 to f do 89
5.if p[j] is equal to r[i] then break the loop
6.otherwise push r[i]into stack and increment count if top is less than(f-1) the 
increment top and insert page otherwise 
Check the page in frame that is not used inthe recent future & replace it.
If there is no such page then replace with the first arrived page.
7.print pages in frames for page in reference string.
8.end
Example-:number of frames =3
Reference string 1 2 3 1 3 4 5 1 2 3 4 1
1 2 3 1 3 4 5 1 2 3 4 1 2
Total no of page faults=7
optimal
#include<stdio.h>
#include<stdlib.h>
#define size 10
Int n,f,*r,p[size],top=-1;
Void push(int,int);
Int main()
{
Int i,j,k,count=0;
1
2
4
1
1
2
1
2
3
1
2
5
1
2
3
1
2
490
Printf(“Enter the number of frames\n”);
Scanf(“%d”,&f);
Printf(“Enter the length of reference string”);
Scanf(“%d”,&n);
R=(int *)malloc(f*sizeof(int));
Printf(“Enter the reference string\n”);
For(i=0;i<n;i++)
 Scanf(“%d”,&r[i]);
For(i=0;i<n;i++)
 P[i]=-1;
Printf(“pages allocated in frames:\n\n”);
For(i=0;i<n;i++)
{
 For(j=0;j<f;j++)
 {
 If(p[j]==p[i])
 Break;
 If(j==f)
 {
 Push(r[i],i);
 Count++;
 }
 Printf(“\n%d\t-->”,r[i]);91
 For(k=0;k<f;k++)
 Printf(“%d\t”,p[k]);
 }
Printf(“\ntotal nuber of page faults:%\n”,count);
Return 0;
Void push(int r,int t)
Int i,j,flag=0,a[20],k;
If (top<(f-1))
{
 P[top++]=r;
 Return;
}
For(i=t+1;i<=n;i++)
{
For(j=0;j<f;j++)
{
 If(r[i]==p[j])
 {
 For(k=0;k<flag;k++)
 If(a[k]==p[j])
Break;
If(k==flag)
a[flag++]=p[i];92
}
If(flag==f)
{
 P[j]=r;
 Return;
}
}
}
For(j=0;j<f;j++)
{
 For(k=0;k<flag;k++)
 {
 If(a[k]==p[j])
 Break;
 }
If(k==flag)
{
 P[j]=r;
 Return;
}
}
P[0]=r;
Return;93
}
Output:
Enter the number of frames:
3
Enter the length of reference string:
10
Enter the reference string:
1 2 3 2 4 5 3 4 2 1
Pages allocated in frames:
1 --> 1 -1 -1
2 --> 1 2 -1
3 --> 1 2 3
2 --> 1 2 3
4 --> 4 2 3
5--> 4 5 3
3-->4 5 3
4-->4 53
2-->2 5 3
1--> 1 5 3
Total Number of page faults:794
AIM:
 To simulate all file allocation strategies
