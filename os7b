Aim:
Simulate the indexed file allocation strategy.
Description:
Linked allocation solves the external fragmentation and size-declaration 
problems of contiguous allocation. However, in the absence of a FAT, linked 
allocation cannot support efficient direct access, since the pointers to the blocks are 
scattered with the blocks themselves all over the disk and must be retrieved in 
order. Indexed allocation solves this problem by bringing all the pointers together 
into one location: the index block.
Each file has its own index block, which is an array of disk-block addresses. 
The i 
 th
entry in the index block points to the i
 th
block of the file. The directory 
contains the address of the index block.
Indexed allocation supports direct access, without suffering from external 
fragmentation because any free block on the disk can satisfy a request for more 
space. Indexed allocation does suffer from wasted space. However, the pointer 
overhead of index block is generally greater than the pointer overhead of linked 
allocation. 
Program:
#include<stdio.h>
#include<stdlib.h>
#define SIZE 10101
struct disk
{
int file,adr[SIZE];
}*block;
struct dir
{
int no,size,lb,nib;
}f[SIZE];
int s,n,fsize,fno,nf=-1;
void create();
void delete();
void traverse();
int main()
{
int choice,ch,I;
printf(“Enter the number of blocks of disk \n”);
scanf(“%d”,&n);
block=(struct disk*malloc(n*sizeof(struct disk)));
for(i=0;i<n;i++)
block[i].file=-1;
printf(“Enter the size of index block \n”);
scanf(“%d”,&s);
do
{
prinntf(“Enter the number: \n”);
scanf(“%d”,&fno);
printf(“Enter your choice\n 1.Create file \n 2.Delete the file \n 
3.Traverse the file \n”);
scanf(“%d”,&choice);
switch(choice);
{
case 1:
create();
break;
case 2:102
delete();
break;
case 3:
traverse();
break;
}
printf(“Doyou want to continue ? 1 for yes, 0 for no \n”);
scanf(“%d”,&ch);
}
while(ch!=0);
return 0;
}
void create()
{
int i,j,count=0,r,k,rb,prev,a=0,c=0;
for(i=0;i<=nf;i++)
if(f[nf].no==fno)
{
printf(“File F%d already inserted \n”);
return;
}
printf(“Enter the size of file F%d \n”,fno);
scanf(“%d”,&fsize);
while(1)
{
for(j=0;j<n;j++)
if(block[j].file=-1) count++;
if(fsize %s==0)
{
if(count<fsize+(fsize/s))
{
k=1;
break;
}
b=0;103
}
else
{
if(count<fsize+(fsize/s)+1)
{
k=1; break;
}
b=1;
}
for(i=0;i<(fsize/s)+b;i++)
{
while(1)
{
if(a>0)
{
block[2b].file=fno;
r=2b;
break;
}
else
{
r=rand()%n
if(block[r].file==-1)
{
block[r].file=fno;
f[++nf]no=fno;
f[nf].size=fsize;
f[nf].lb=r;
break;
}
}
}
}
for (j=0;j<r;j++)
{104
while(1)
{
rb=rand()%n;
if(block[rb].file==-1)
{
block[rb].file=fno;
block[r].adr[j]=rb;
if((j==s-1)&&(i!=(fsize/s)+b-1)) break;
c++;
break;
}
}
if(prev==rb) break;
if(c==fsize) goto step;
}
a++
}
}
step:
if(k==1)
printf(“File F%d is inserted \n”);
else
{
f[nf].nib=a+1;
printf(“File F%d is inserted \n”);
}
return;
}
void delete()
{
int i,j,k,a,b=0;
for(i=0;i<=nf;i++)
{
if(f[i].no==fno)
{105
a=f[i].ib;
block[a].file=-1;
while(b!=f[i].nib)
{
for(j=0;j<r;j++)
{
if((j==r-1)&&(b!=f[i].nib-1))
{
a=block[a].adr[j];
block[a].file=-1;
break;
}
block [block[a].adr[j]].file=-1;
}
b++;
}
for (j=1;j<nf-1;j++)
f[j]=f[j+1];
nf--;
printf(“File F%d deleted \n”,fno);
break;
}
}
if(i==p+1)
printf(“File F%d cannot be found \n,Fno);
return;
}
void traverse()
{
int i,j,k,a,b=0,c=0;
for(i=0;i<=nf;i++)
{
if(f[i].no==fno)
{
printf(“File F%d is located at : \n”,fno);106
a=f[i].ib;
while(b!=f[i].nib)
{
for(j=0;j<r;j++)
{
if((j==r-1)&&(b!=f[i].nib-1))
{
k=block[a].adr[j];
a=k;
break;
}
c++;
printf(“%d \t”,block[a].adr[j]);
if(c==f[i].size)break;
}
b++;
}
break;
}
printf(“\n”);
if(i==nf+1)
printf(“file F%d cannot be found \n”,fno);
return;
}
}
Output:
Enter the number of blocks of disc
12
Enter the size of index block
3
Enter the number
1
Enter your choice
1. Create the file107
2. Delete the file
3. Traverse the file
1
Enter the size of file F1:4
File F1 is inserted
Do you want to continue ? 1 for yes, 0 for no
1
Enter file number
2
Enter your choice
1. Create the file
2. Delete the file
3. Traverse the file
1
Enter the size of file F2:2
File F2 is inserted
Do you want to continue ? 1 for yes, 0 for no
1
Enter file number
1
Enter your choice
1. Create the file
2. Delete the file
3. Traverse the file
3
File F1 is located at
11 10 6 8
Do you want to continue ? 1 for yes, 0 for no
1
Enter file number
1
Enter your choice
1. Create the file
2. Delete the file
3. Traverse the file108
2
File F1 deleted
Do you want to continue ? 1 for yes, 0 for no
0
Aim:
Simulate the linked file a
